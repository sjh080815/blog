<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huck</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://39.97.232.17/"/>
  <updated>2020-03-02T09:28:29.288Z</updated>
  <id>http://39.97.232.17/</id>
  
  <author>
    <name>Huck</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>业务理论/灰度发布</title>
    <link href="http://39.97.232.17/2020/03/08/%E4%B8%9A%E5%8A%A1%E7%90%86%E8%AE%BA/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
    <id>http://39.97.232.17/2020/03/08/%E4%B8%9A%E5%8A%A1%E7%90%86%E8%AE%BA/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</id>
    <published>2020-03-08T11:54:55.793Z</published>
    <updated>2020-03-02T09:28:29.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>灰度发布就是在黑和白之间发布网站。假设有一个黑区和白区。黑区使用旧版本的产品，白区发布新版本产品，然后对白区进行产品调研。如果白区没有什么意见，则可白区向黑区扩散。</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>beta和正式版。对特定用户推送beta版本产品，进行使用状况调研，然后根据调研逐渐将beta转化为正式版。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;灰度发布就是在黑和白之间发布网站。假设有一个黑区和白区。黑区使用旧版本的产品，白区发布新版本产品，然后对白区进行产品调研。如果白区没有什么意
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>虚拟化（KVM）/虚拟化及磁盘</title>
    <link href="http://39.97.232.17/2020/03/08/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88KVM%EF%BC%89/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%8F%8A%E7%A3%81%E7%9B%98/"/>
    <id>http://39.97.232.17/2020/03/08/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88KVM%EF%BC%89/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%8F%8A%E7%A3%81%E7%9B%98/</id>
    <published>2020-03-08T11:54:55.783Z</published>
    <updated>2020-01-13T11:22:49.369Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟机，我们常叫做实例。一个实例就含一个最基本的服务器的最小系统，包括虚拟硬件系统和软件系统。</p><p>通常生产环节的服务器不适用GUI界面，但是再做KVM的时候，需要GUI界面做辅助管理，所以再安装KVM之前务必先安装桌面。</p><p><strong>KVM最终生成的配置文件是xml文件</strong></p><p>创建虚拟机时，使用命令<code>virt-install</code>创建KVM虚拟机。</p><p>常用参数：</p><ul><li>name：虚拟机名</li><li>vCPUs：虚拟CPU核心数</li><li>ram：虚拟内存大小</li><li>os-type：系统类型</li><li>cdrom：CD挂载的镜像文件</li><li>file：虚拟机硬盘文件</li><li>file-size：虚拟硬盘大小</li></ul><h1 id="虚拟硬盘"><a href="#虚拟硬盘" class="headerlink" title="虚拟硬盘"></a>虚拟硬盘</h1><p>通常情况，任何电脑想运行起来都得有硬盘做数据存储支持，所以，咱们先创建虚拟硬盘：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create xxx.qcow2 -f qcow2 size</span><br></pre></td></tr></table></figure><p>上述代码创建了一个qcow2格式的虚拟硬盘。</p><p>虚拟磁盘大概有两种类型，一个是IDE，一个是Virtio。根据读写数据测试，Virtio是性能最好的方案。</p><p>虚拟磁盘的格式也有很多种，用的最多的是qcow2格式的硬盘文件。</p><p>QEMU支持常见使用的raw和qcow2格式。</p><h1 id="硬盘虚拟化的主要操作"><a href="#硬盘虚拟化的主要操作" class="headerlink" title="硬盘虚拟化的主要操作"></a>硬盘虚拟化的主要操作</h1><h2 id="硬盘创建"><a href="#硬盘创建" class="headerlink" title="硬盘创建"></a>硬盘创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create test 50G</span><br></pre></td></tr></table></figure><p>创建一个50G的硬盘，但是没有写是什么格式。要实际使用必须给一个指定的硬盘格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create test.qcow2 -f qcow2 50G</span><br></pre></td></tr></table></figure><p>上边就是指定生成一个qcow2格式的硬盘。注意钱两段语句test有无后缀。</p><p>这里不写绝对地址，那么就再当前目录生成文件。</p><p>可以通过<code>qemu-img info test.qcow2</code>查看生成硬盘的信息。</p><h2 id="硬盘格式转换"><a href="#硬盘格式转换" class="headerlink" title="硬盘格式转换"></a>硬盘格式转换</h2><p>平时硬盘也就一两种格式常用，但是有时候也会使用其他格式，那么就需要进行转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -p -f raw -O qcow2 test test1.qcow2</span><br></pre></td></tr></table></figure><p>#快照</p><p>快照就是系统在某一个瞬间被“抓拍”到的状态，这个状态可以随时进行恢复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img snapshot test.qcow2 -c s1</span><br></pre></td></tr></table></figure><p>以上代码创建了一个名为s1的快照，我们可以查看一下快照列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img snapshot test.qcow2 -l</span><br></pre></td></tr></table></figure><p>镜像是用来给特殊情况下给服务器做还原用的，所以必然就会用到还原，使用a参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img snapshot test.qcow2 -a s1</span><br></pre></td></tr></table></figure><h1 id="后备镜像"><a href="#后备镜像" class="headerlink" title="后备镜像"></a>后备镜像</h1><p>后备镜像就是常说的公有镜像，一个后备镜像可以做多个虚拟机的母盘。</p><p>后备（backend）使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 -b backend img_name</span><br></pre></td></tr></table></figure><p>使用后备磁盘创建一个虚拟硬盘。</p><h1 id="虚拟硬盘属性定义"><a href="#虚拟硬盘属性定义" class="headerlink" title="虚拟硬盘属性定义"></a>虚拟硬盘属性定义</h1><p>最常用的硬盘指标是容量，虚拟主机经常会出现硬盘不足，那么我们就需要手动再给加大硬盘了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img resize test1.qcow2 +2G</span><br></pre></td></tr></table></figure><p>这里是给元硬盘的基础加2G，当然也可以写成需要改到的大小。</p><h1 id="裸设备"><a href="#裸设备" class="headerlink" title="裸设备"></a>裸设备</h1><p>为让虚拟机获取极致的算力和性能，可以直接挂在裸硬盘到虚拟机。也可以使用lvm，但是lvm需要关闭cache，防止数据丢失。</p><h1 id="常用虚拟硬盘格式对比"><a href="#常用虚拟硬盘格式对比" class="headerlink" title="常用虚拟硬盘格式对比"></a>常用虚拟硬盘格式对比</h1><p>RAW：整体性能较高</p><p>qcow2：常见的虚拟硬盘格式，适合高消耗计算</p><p>lvm：适合高IO的计算</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虚拟机，我们常叫做实例。一个实例就含一个最基本的服务器的最小系统，包括虚拟硬件系统和软件系统。&lt;/p&gt;
&lt;p&gt;通常生产环节的服务器不适用GUI界面，但是再做KVM的时候，需要GUI界面做辅助管理，所以再安装KVM之前务必先安装桌面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KVM最终
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>虚拟化（KVM）/网络虚拟化</title>
    <link href="http://39.97.232.17/2020/03/08/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88KVM%EF%BC%89/%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    <id>http://39.97.232.17/2020/03/08/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88KVM%EF%BC%89/%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96/</id>
    <published>2020-03-08T11:54:55.774Z</published>
    <updated>2020-01-13T11:22:49.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟化分类"><a href="#虚拟化分类" class="headerlink" title="虚拟化分类"></a>虚拟化分类</h1><p>虚拟化可分为半虚拟化和全虚拟化。半虚拟化和全虚拟化的本质区别在于虚拟化层。</p><h1 id="半虚拟化网络（Virtio驱动）"><a href="#半虚拟化网络（Virtio驱动）" class="headerlink" title="半虚拟化网络（Virtio驱动）"></a>半虚拟化网络（Virtio驱动）</h1><p>半虚拟化主机需要对客户机操作系统进行一定的修改才能使用。半虚拟化宿主机和虚拟机都需要安装Virtio的虚拟工具。</p><h2 id="半虚拟化安装过程"><a href="#半虚拟化安装过程" class="headerlink" title="半虚拟化安装过程"></a>半虚拟化安装过程</h2><p>目前主流操作系统都默认带有Virtio的网络驱动，只需要再内核中看看是否支持。</p><p>在启动虚拟机的时候加入参数virtio-net-oci，指定网卡if=virtio（网卡类型）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;虚拟化分类&quot;&gt;&lt;a href=&quot;#虚拟化分类&quot; class=&quot;headerlink&quot; title=&quot;虚拟化分类&quot;&gt;&lt;/a&gt;虚拟化分类&lt;/h1&gt;&lt;p&gt;虚拟化可分为半虚拟化和全虚拟化。半虚拟化和全虚拟化的本质区别在于虚拟化层。&lt;/p&gt;
&lt;h1 id=&quot;半虚拟化网络（V
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>虚拟化（KVM）/KVM概念</title>
    <link href="http://39.97.232.17/2020/03/08/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88KVM%EF%BC%89/KVM%E6%A6%82%E5%BF%B5/"/>
    <id>http://39.97.232.17/2020/03/08/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88KVM%EF%BC%89/KVM%E6%A6%82%E5%BF%B5/</id>
    <published>2020-03-08T11:54:55.766Z</published>
    <updated>2020-01-13T11:22:49.347Z</updated>
    
    <content type="html"><![CDATA[<p>目前各大云计算厂商都在使用虚拟化云服务，大部分以VMware、Xen和KVM（Openstack）等架构，KVM是使用最广的虚拟化方案。</p><p>虚拟化是将空闲的硬件资源分配到虚拟计算机中，使服务器的性能能达到最好，发挥到极致。</p><p>KVM是内核加强虚拟机，从他的名称可以看出这是个基于内核的功能。</p><p>KVM是虚拟机软件，那么运行这个软件则要有CPU虚拟化选项打开，否则CPU无法进行虚拟化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前各大云计算厂商都在使用虚拟化云服务，大部分以VMware、Xen和KVM（Openstack）等架构，KVM是使用最广的虚拟化方案。&lt;/p&gt;
&lt;p&gt;虚拟化是将空闲的硬件资源分配到虚拟计算机中，使服务器的性能能达到最好，发挥到极致。&lt;/p&gt;
&lt;p&gt;KVM是内核加强虚拟机，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>虚拟化（KVM）/CPU虚拟及内存虚拟</title>
    <link href="http://39.97.232.17/2020/03/08/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88KVM%EF%BC%89/CPU%E8%99%9A%E6%8B%9F%E5%8F%8A%E5%86%85%E5%AD%98%E8%99%9A%E6%8B%9F/"/>
    <id>http://39.97.232.17/2020/03/08/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%88KVM%EF%BC%89/CPU%E8%99%9A%E6%8B%9F%E5%8F%8A%E5%86%85%E5%AD%98%E8%99%9A%E6%8B%9F/</id>
    <published>2020-03-08T11:54:55.758Z</published>
    <updated>2020-01-13T11:22:49.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="硬件虚拟化（CPU和内存）"><a href="#硬件虚拟化（CPU和内存）" class="headerlink" title="硬件虚拟化（CPU和内存）"></a>硬件虚拟化（CPU和内存）</h1><h2 id="常用CPU架构"><a href="#常用CPU架构" class="headerlink" title="常用CPU架构"></a>常用CPU架构</h2><h3 id="SMP技术"><a href="#SMP技术" class="headerlink" title="SMP技术"></a>SMP技术</h3><p>这种架构CPU共同访问所有内存，速率比较低，且效率也低。</p><h3 id="NUMA技术"><a href="#NUMA技术" class="headerlink" title="NUMA技术"></a>NUMA技术</h3><p>这是最常见的虚拟化技术，CPU直接通信自己所属的内存，直接调用，效率较高。</p><p><strong>这里需要用到numactl插件，需手动安装一下</strong></p><p>看以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bash$ numactl --hardware</span><br><span class="line">available: 1 nodes (0)</span><br><span class="line">node 0 cpus: 0 1 2 3 4 5 6 7</span><br><span class="line">node 0 size: 7850 MB</span><br><span class="line">node 0 free: 4704 MB</span><br><span class="line">node distances:</span><br><span class="line">node   0 </span><br><span class="line">  0:  10</span><br></pre></td></tr></table></figure><p>从以上代码得，这台电脑是单CPU，是多核的CPU。内存一共7850M，空余4704M。</p><p>查看NUMA使用的内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bash# numasat -c qemu-kvm</span><br><span class="line">Per-node numastat info (in MBs):</span><br><span class="line">                Node 0 Total</span><br><span class="line">                ------ -----</span><br><span class="line">Numa_Hit         19365 19365</span><br><span class="line">Numa_Miss            0     0</span><br><span class="line">Numa_Foreign         0     0</span><br><span class="line">Interleave_Hit     175   175</span><br><span class="line">Local_Node       19365 19365</span><br><span class="line">Other_Node           0     0</span><br><span class="line">Local_Node       19365 19365</span><br><span class="line">Other_Node           0     0</span><br></pre></td></tr></table></figure><p>可以看到内存的占用状况。</p><h1 id="KSM技术："><a href="#KSM技术：" class="headerlink" title="KSM技术："></a>KSM技术：</h1><p>虚拟主句和宿主主机内存合并。</p><h2 id="内存气球技术"><a href="#内存气球技术" class="headerlink" title="内存气球技术"></a>内存气球技术</h2><p>需要virt balloon插件调节内存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;硬件虚拟化（CPU和内存）&quot;&gt;&lt;a href=&quot;#硬件虚拟化（CPU和内存）&quot; class=&quot;headerlink&quot; title=&quot;硬件虚拟化（CPU和内存）&quot;&gt;&lt;/a&gt;硬件虚拟化（CPU和内存）&lt;/h1&gt;&lt;h2 id=&quot;常用CPU架构&quot;&gt;&lt;a href=&quot;#常用
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试常见问题/uniq和sort</title>
    <link href="http://39.97.232.17/2020/03/08/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/uniq%E5%92%8Csort/"/>
    <id>http://39.97.232.17/2020/03/08/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/uniq%E5%92%8Csort/</id>
    <published>2020-03-08T11:54:55.743Z</published>
    <updated>2020-02-27T06:30:16.811Z</updated>
    
    <content type="html"><![CDATA[<p>sort和uniq是两个查看文件时候经常会用到的筛选工具。</p><p>sort：升序输出，将输入的文本以升序的方式进行输出。</p><p>uniq：降重输出。把输入文本里的重复数据剔除然后输出。</p><h1 id="面试常见问题"><a href="#面试常见问题" class="headerlink" title="面试常见问题"></a>面试常见问题</h1><p>查看nginx的PV地址：</p><p>nginx一般会配置access.log日志文件，查询这个日志文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># cat access.log</span></span><br><span class="line"></span><br><span class="line">111.20.59.9 - - [25/Feb/2020:17:29:04 +0800] <span class="string">"GET /zabbix/favicon.ico HTTP/1.1"</span> 200 32988 <span class="string">"http://39.97.232.17/zabbix/zabbix.php?action=dashboard.view&amp;ddreset=1"</span> <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.1</span></span><br><span class="line"><span class="string">112</span></span><br></pre></td></tr></table></figure><p>分析日志结构，发现第一列是用户的RealIP，也就是这里的PV，后边是http请求头的一些参数。</p><p>按要求进行排序并降重：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># cat access.log | awk '&#123;print $1&#125;' | sort | uniq</span></span><br></pre></td></tr></table></figure><p>分析命令：第二段使用了awk进行了正则筛选，选中了第一列数据。将选中的数据进行升序和降重。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sort和uniq是两个查看文件时候经常会用到的筛选工具。&lt;/p&gt;
&lt;p&gt;sort：升序输出，将输入的文本以升序的方式进行输出。&lt;/p&gt;
&lt;p&gt;uniq：降重输出。把输入文本里的重复数据剔除然后输出。&lt;/p&gt;
&lt;h1 id=&quot;面试常见问题&quot;&gt;&lt;a href=&quot;#面试常见问题
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试常见问题/rsync和scp</title>
    <link href="http://39.97.232.17/2020/03/08/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/rsync%E5%92%8Cscp/"/>
    <id>http://39.97.232.17/2020/03/08/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/rsync%E5%92%8Cscp/</id>
    <published>2020-03-08T11:54:55.733Z</published>
    <updated>2020-02-27T11:00:11.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rsync和scp"><a href="#rsync和scp" class="headerlink" title="rsync和scp"></a>rsync和scp</h1><p>rsync是一种常见的征粮备份工具，scp常被用做文件传输。</p><h2 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h2><p>可以进行软硬连接的拷贝。这个文件传输的方式是同步。</p><p>同步的过程中，如果从机的相关目录存在，那reync会惊醒数据比较，对数据不同的进行更新。</p><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p>scp不支持连接的传输。传输方式是复制。</p><p>复制的过程中，如果从机存在相关的目录，会直接进行覆盖复制。</p><p><strong>从上边综合考虑，rsync更适合于文件同步，scp更适合于文件传输。</strong></p><h1 id="大集群管理方案"><a href="#大集群管理方案" class="headerlink" title="大集群管理方案"></a>大集群管理方案</h1><ol><li>使用跳板机（这里可以使用jumpserver，开源），对集群进行统一管理</li><li>使用自动化工具（ansible）</li><li>运维安全：一般关闭selinux和firewalld，使用物理防火墙</li></ol><h1 id="Toncat和Resin"><a href="#Toncat和Resin" class="headerlink" title="Toncat和Resin"></a>Toncat和Resin</h1><p>Tomcat是很常用的一种java web服务器，用户多，适合于中小型企业。兼容性好，文献多。</p><p>Resin性能更好，常被大型企业采用。</p><h1 id="DNS解析过程"><a href="#DNS解析过程" class="headerlink" title="DNS解析过程"></a>DNS解析过程</h1><p>解析服从三个优先级：</p><ol><li>查看自身的hosts文件</li><li>在本地设置的DNS服务器解析</li><li>在跟服务器中解析（先查一级根服务器，再查二级根服务器）</li></ol><h1 id="keepalived原理"><a href="#keepalived原理" class="headerlink" title="keepalived原理"></a>keepalived原理</h1><p>再虚拟路由中，Master一直发送VRRP，BACKUP不会抢占VIP，当Master宕机时，BACKUP直接按照优先级抢占VIP。</p><h1 id="LVS原理"><a href="#LVS原理" class="headerlink" title="LVS原理"></a>LVS原理</h1><ol><li><p>NAT模式<br>均衡器收到请求，将请求的目的IP转向RS。回传报文的适合，将RS的IP换成均衡器的IP。<br>优点：只需要均衡器有IP。<br>缺点：服务器过多时效率变低。</p></li><li><p>路由模式（DR）<br>LVS做了调度器，请求发送到LVS上，LVS调度转发到RS上，RS直接返回数据，不经过LVS。<br>LVS的网卡和RS服务器的网卡需要再一个网段上。</p></li><li><p>隧道模式（TUN）<br>多地多中心方案的调度器。此时的VIP，DIP和RIP都是公网IP。客户向VIP发送请求，调度器将请求转发给RS。<br>缺点：服务器局限部分linux系统</p></li></ol><h1 id="MySQL复制延迟问题"><a href="#MySQL复制延迟问题" class="headerlink" title="MySQL复制延迟问题"></a>MySQL复制延迟问题</h1><ol><li>主从硬件差异</li><li>主从线程不匹配</li><li>SQL赘余</li><li>网络延迟</li><li>主库压力大</li></ol><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><p>栈： 先入后出，只可末尾单端操作。</p><p>队列： 先入先出，单端入，单端出。</p><h1 id="ping原理"><a href="#ping原理" class="headerlink" title="ping原理"></a>ping原理</h1><p>用icmp协议探测远端请求是否可达。</p><h1 id="LNMP卡顿现象排查"><a href="#LNMP卡顿现象排查" class="headerlink" title="LNMP卡顿现象排查"></a>LNMP卡顿现象排查</h1><ol><li>检查服务器的硬件负载（方案：查看MySQL负载，如果MySQL也能正常，那就可以考虑提升设备性能）</li><li>检查服务器的网口负载（方案：使用CDN，加大宽带）</li><li>检查Nginx连接、进程数量（方案：修改Nginx配置，适配于本设备硬件）</li><li>查看php-fpm进程（方案：修改php.ini配置文件）</li><li>查看MySQL负载，查日志（方案：拆日志，加redis等缓存技术）</li></ol><h1 id="MySQL查询慢"><a href="#MySQL查询慢" class="headerlink" title="MySQL查询慢"></a>MySQL查询慢</h1><ol><li>没有索引</li><li>I/O小</li><li>内存不足</li><li>网速较慢（也有外网连接的mysql）</li><li>数据量过大</li><li>死锁</li><li>返回了不必要列</li><li>没优化好</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rsync和scp&quot;&gt;&lt;a href=&quot;#rsync和scp&quot; class=&quot;headerlink&quot; title=&quot;rsync和scp&quot;&gt;&lt;/a&gt;rsync和scp&lt;/h1&gt;&lt;p&gt;rsync是一种常见的征粮备份工具，scp常被用做文件传输。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试常见问题/LVS、Haproxy和Nginx用作proxy服务器</title>
    <link href="http://39.97.232.17/2020/03/08/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/LVS%E3%80%81Haproxy%E5%92%8CNginx%E7%94%A8%E4%BD%9Cproxy%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://39.97.232.17/2020/03/08/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/LVS%E3%80%81Haproxy%E5%92%8CNginx%E7%94%A8%E4%BD%9Cproxy%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-03-08T11:54:55.707Z</published>
    <updated>2020-02-21T06:21:32.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx服务器常被用做静态web服务器和反向代理服务器，这种代理在web环境中用的较多。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>工作在七层，对http协议做分流</li><li>对网络依赖较小</li><li>安装和配置简单</li><li>抗压</li><li>适合做web应用服务器</li><li>做中层反向代理服务器</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>仅支持http和https及邮箱协议</li><li>对于后端服务器稳定性要求较高。上传数据时如果后端服务器宕机，Nginx会直接切换后端服务器。</li></ol><h1 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h1><p>LVS时一种运行在四层协议上的调度器。</p><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ol><li>抗高压</li><li>配置简单</li><li>工作在四层，基本可以转发所有数据</li><li>工作更稳定</li><li>LVS只负责分发</li></ol><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ol><li>不支持正则，不能做web动静分离</li><li>网站系统过于庞大</li></ol><h1 id="Haproxy"><a href="#Haproxy" class="headerlink" title="Haproxy"></a>Haproxy</h1><p>这是一种工作在四/七层的代理软件。</p><h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><ol><li>支持虚拟主机</li><li>可以保持session和cookie</li><li>速度更快</li><li>可对MySQL做读写负载均衡</li><li>策略更多</li></ol><h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><ol><li>不支持POP/SMTP协议</li><li>不支持SPDY协议</li><li>不支持HTTP cache</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;p&gt;Nginx服务器常被用做静态web服务器和反向代理服务器，这种代理在web环境中用的较多。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/定期执行命令</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/%E5%AE%9A%E6%9C%9F%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/%E5%AE%9A%E6%9C%9F%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/</id>
    <published>2020-03-08T11:54:55.691Z</published>
    <updated>2019-12-15T08:17:07.457Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一般情况下，服务器需要定期执行一些命令。这些命令不可能每次都手动执行，所以咱们就要用到自动执行的工具。</p></blockquote><p>工具名：crontab</p><p>crontab定义命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>此时会打开crontab的配置文件，文件格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>配置文件解析：</p><p>第一个<em>：执行命令的时参数，若写成</em>/2则表示每两个小时执行一次。</p><p>第二个<em>：执行命令的分参数，若写成</em>/30则表示每30分钟执行一次。</p><p>第三个*：执行命令的日参数，表示几号执行。这个参数可以是多个，用逗号隔开。</p><p>第四个*：执行命令的月参数，表示几月执行。这个参数可以是多个，用逗号隔开。</p><p>第五个*：执行命令的星期参数，表示周几执行。这个参数可以是多个，用逗号隔开。</p><p>如果这里是五个*，则表示这个命令一直执行。</p><p>command参数：即是命令参数。参数可以是shell脚本，但是要写成bash命令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一般情况下，服务器需要定期执行一些命令。这些命令不可能每次都手动执行，所以咱们就要用到自动执行的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工具名：crontab&lt;/p&gt;
&lt;p&gt;crontab定义命令：&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/ssh配置</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/ssh%E9%85%8D%E7%BD%AE/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/ssh%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-08T11:54:55.683Z</published>
    <updated>2020-02-29T16:45:12.405Z</updated>
    
    <content type="html"><![CDATA[<p>SSH服务是Linux的远程命令行服务。一般情况下，Linux系统默认会安装这个服务，我们只需要修改相关的配置。</p><h1 id="多网卡设置"><a href="#多网卡设置" class="headerlink" title="多网卡设置"></a>多网卡设置</h1><p>服务器通常不止有一个网卡，每个网卡的业务不同，所以就需要指定一个网卡做ssh服务。</p><p>在/etc/ssh/下，修改sshd_config服务配置文件。</p><p>添加ListenAddress，绑定到网卡的IP上。</p><h1 id="业务端口绑定"><a href="#业务端口绑定" class="headerlink" title="业务端口绑定"></a>业务端口绑定</h1><p>在上述文件中添加Port参数。</p><p>在默认情况下这个文件这个文件大部分是被注释掉的，所以我们需要手动进行配置。</p><h1 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h1><p>免密登录就是使用密钥进行登录。</p><p>首先创建一下public_key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ssh]<span class="comment"># ssh-keygen </span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:63gG1/fyrxc7qJBNKAZ1QPUAgqB7fMX9nr85reoPt8I root@localhost.localdomain</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">| .. ...=++       |</span></span><br><span class="line"><span class="string">|.  . .o.. o      |</span></span><br><span class="line"><span class="string">|.    .o .  .     |</span></span><br><span class="line"><span class="string">| o   ..  ..      |</span></span><br><span class="line"><span class="string">|. o .  oSo..     |</span></span><br><span class="line"><span class="string">| . .  o oo=..  . |</span></span><br><span class="line"><span class="string">|       o.++o.o. o|</span></span><br><span class="line"><span class="string">|       oo E+o+oo.|</span></span><br><span class="line"><span class="string">|      .o..o=O*o+o|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>将密钥分发到要连接的服务器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ssh]<span class="comment"># ssh-copy-id root@0.0.0.0</span></span><br></pre></td></tr></table></figure><p>这样就直接使用ssh连接到服务器了。</p><h1 id="SCP协议"><a href="#SCP协议" class="headerlink" title="SCP协议"></a>SCP协议</h1><p>这里会经常使用SCP协议，传输文件数据。使用的通道也是SSH的通道。使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp file root@0.0.0.0:path</span><br></pre></td></tr></table></figure><p>这样就将数据传输到指定的服务器上。</p><h1 id="生产环境案例"><a href="#生产环境案例" class="headerlink" title="生产环境案例"></a>生产环境案例</h1><p>通常情况下，生产环境是会禁用掉远程ssh连接root账户的（处于安全考虑），既是使用root远程ssh也会使用跳板机。这里说一下ssh的配置。</p><p>防止被扫描端口后进行端口直接攻击，需要改变ssh的端口号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 222</span><br></pre></td></tr></table></figure><p>限制连接数和密码尝试次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MaxAuthTries 3 #最大尝试次数</span><br><span class="line">MaxSessions 5 #最大连接数</span><br></pre></td></tr></table></figure><p>禁用ssh远程登录root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin no</span><br></pre></td></tr></table></figure><p>这样就基本保了服务器的ssh安全。</p><h1 id="ssh同步"><a href="#ssh同步" class="headerlink" title="ssh同步"></a>ssh同步</h1><p>在某些情况下，需要进行ssh协同工作，有时候需要一起在一个终端上进行操作，那么这里就用到了screen工具。</p><p>使用yum安装。</p><p>创建一个screen</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S linux</span><br></pre></td></tr></table></figure><p>在另一个终端直接使用screen -x就可以直接接入这个共享的连接上了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SSH服务是Linux的远程命令行服务。一般情况下，Linux系统默认会安装这个服务，我们只需要修改相关的配置。&lt;/p&gt;
&lt;h1 id=&quot;多网卡设置&quot;&gt;&lt;a href=&quot;#多网卡设置&quot; class=&quot;headerlink&quot; title=&quot;多网卡设置&quot;&gt;&lt;/a&gt;多网卡设置&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/SAMBA服务</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/SAMBA%E6%9C%8D%E5%8A%A1/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/SAMBA%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-03-08T11:54:55.673Z</published>
    <updated>2019-12-15T08:17:07.447Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SAMBA服务可以搭建网上邻居服务器，可共享一些硬件设备。</p></blockquote><h1 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h1><p>安装必要软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install samba samba-client samba-common</span><br></pre></td></tr></table></figure><p>配置一下samba的配置信息，位置/etc/samba/smb.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">        workgroup &#x3D; SAMBA</span><br><span class="line">        security &#x3D; user</span><br><span class="line"></span><br><span class="line">        passdb backend &#x3D; tdbsam</span><br><span class="line"></span><br><span class="line">        printing &#x3D; cups</span><br><span class="line">        printcap name &#x3D; cups</span><br><span class="line">        load printers &#x3D; yes</span><br><span class="line">        cups options &#x3D; raw</span><br><span class="line">[print$]</span><br><span class="line">        comment &#x3D; Printer Drivers</span><br><span class="line">        path &#x3D; &#x2F;var&#x2F;lib&#x2F;samba&#x2F;drivers</span><br><span class="line">        write list &#x3D; @printadmin root</span><br><span class="line">        force group &#x3D; @printadmin</span><br><span class="line">        create mask &#x3D; 0664</span><br><span class="line">        directory mask &#x3D; 0775</span><br></pre></td></tr></table></figure><h1 id="global全局配置模块"><a href="#global全局配置模块" class="headerlink" title="global全局配置模块"></a>global全局配置模块</h1><p>workgroup：工作组</p><p>log file：日志文件，文件名可用变量。</p><p>max log size：最大日志大小。</p><p>security：</p><ul><li>share：无密码分享</li><li>user：使用服务器本地的账户密码</li><li>domain：使用外部密码数据库</li></ul><p>passdb backend：密码数据库格式。</p><h1 id="共享文件模块"><a href="#共享文件模块" class="headerlink" title="共享文件模块"></a>共享文件模块</h1><p>comment：目录说明。</p><p>path：共享目录位置。</p><p>browseable：可浏览。</p><p>writeable：可写。</p><h1 id="无密码共享"><a href="#无密码共享" class="headerlink" title="无密码共享"></a>无密码共享</h1><p>在samba 4.2.0 版本之后不再兼容3.0 的版本， 该参数无法兼容security=share，所以无法搭建无密码共享。</p><h1 id="需密码共享"><a href="#需密码共享" class="headerlink" title="需密码共享"></a>需密码共享</h1><p>security写user参数，认证密码是本地密码，</p><p>在配置文件创建共享目录，用<code>testparm -v</code>测试配置文件。没有问题之后启动服务。</p><p>进行本地测试,校验本地配置文件正确性。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>首先添加本地账户和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -G users smb1</span><br><span class="line"><span class="built_in">echo</span> 123456 | passwd --stdin smb1</span><br></pre></td></tr></table></figure><p>添加samba账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdbedit -a -u smb1</span><br></pre></td></tr></table></figure><p>会要求设置密码，密码是登录samba的密码。</p><p>创建号后重启服务，用本地测试一下连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bash# smbclient -L &#x2F;&#x2F;127.0.0.1  -U smb1</span><br><span class="line">Enter SAMBA\smb1&#39;s password:</span><br><span class="line"></span><br><span class="line">        Sharename       Type      Comment</span><br><span class="line">        ---------       ----      -------</span><br><span class="line">        temp            Disk      test</span><br><span class="line">        IPC$            IPC       IPC Service (Samba 4.9.1)</span><br><span class="line">Reconnecting with SMB1 for workgroup listing.</span><br><span class="line"></span><br><span class="line">        Server               Comment</span><br><span class="line">        ---------            -------</span><br><span class="line"></span><br><span class="line">        Workgroup            Master</span><br><span class="line">        ---------            -------</span><br></pre></td></tr></table></figure><p>服务端配置完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SAMBA服务可以搭建网上邻居服务器，可共享一些硬件设备。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;服务端安装&quot;&gt;&lt;a href=&quot;#服务端安装&quot; class=&quot;headerlink&quot; title=&quot;服务端安装&quot;&gt;&lt;/a&gt;服务端安装&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/rabbitMQ</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/rabbitMQ/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/rabbitMQ/</id>
    <published>2020-03-08T11:54:55.663Z</published>
    <updated>2020-02-26T15:15:40.905Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ是一种常用的消息队列服务器，是通过erlang编写的，所以再运行这个服务器的服务器上需要先不是erlang的环境。</p><h1 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h1><p>我这里使用的是yum直接安装的RabbitMQ。再生产环境中，常用的是二进制部署或者编译安装。这里为了方便就使用了yum安装。</p><p><strong>注意：在使用yum安装的时候会自动安装erlang的环境，编译安装则需要进行手动安装</strong></p><h1 id="RabbitMQ的原理"><a href="#RabbitMQ的原理" class="headerlink" title="RabbitMQ的原理"></a>RabbitMQ的原理</h1><p>当程序和RabbitMQ服务器认证后，会生成一个AMQP信道。一个AMQP中好汉多个信道。这样的话就可以减少TCP的连接创建数量，提高服务器效率，减少开销。</p><h1 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h1><p>和Nginx类似，RabbitMQ会生成多个虚拟主机，每个虚拟主机负责一个服务。</p><p>添加虚拟主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_vhost [vhost_name]</span><br></pre></td></tr></table></figure><p>需要注意的是，每个虚拟主机之间都不会互相通信。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RabbitMQ是一种常用的消息队列服务器，是通过erlang编写的，所以再运行这个服务器的服务器上需要先不是erlang的环境。&lt;/p&gt;
&lt;h1 id=&quot;环境部署&quot;&gt;&lt;a href=&quot;#环境部署&quot; class=&quot;headerlink&quot; title=&quot;环境部署&quot;&gt;&lt;/a&gt;环
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/NTP服务</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/NTP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/NTP%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-03-08T11:54:55.654Z</published>
    <updated>2019-12-15T08:17:07.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通常情况下，服务器的授时服务都是连接至网络上的授时服务器的。但是有的时候，服务器进行异地容灾，特别在国外的时候，需要生成日志，日志时间要求是主服务的时间基准，那么就需要架设NTP服务进行授时了。</p></blockquote><h1 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h1><p>安装必要的软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp tzdata</span><br></pre></td></tr></table></figure><p>下来进行文件配置。ntp的配置文件只有一个，/etc/ntp.conf。我们看一下这个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># For more information about this file, see the man pages</span><br><span class="line"># ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).</span><br><span class="line"></span><br><span class="line">driftfile &#x2F;var&#x2F;lib&#x2F;ntp&#x2F;drift</span><br><span class="line"></span><br><span class="line"># Permit time synchronization with our time source, but do not</span><br><span class="line"># permit the source to query or modify the service on this system.</span><br><span class="line">restrict default nomodify notrap nopeer noquery</span><br><span class="line"></span><br><span class="line"># Permit all access over the loopback interface.  This could</span><br><span class="line"># be tightened as well, but to do so would effect some of</span><br><span class="line"># the administrative functions.</span><br><span class="line">restrict 127.0.0.1</span><br><span class="line">restrict ::1</span><br><span class="line"></span><br><span class="line"># Hosts on local network are less restricted.</span><br><span class="line">restrict 192.168.139.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line"># Use public servers from the pool.ntp.org project.</span><br><span class="line"># Please consider joining the pool (http:&#x2F;&#x2F;www.pool.ntp.org&#x2F;join.html).</span><br><span class="line">server 0.centos.pool.ntp.org iburst</span><br><span class="line">server 1.centos.pool.ntp.org iburst</span><br><span class="line">server 2.centos.pool.ntp.org iburst</span><br><span class="line">server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">#broadcast 192.168.1.255 autokey        # broadcast server</span><br><span class="line">#broadcastclient                        # broadcast client</span><br><span class="line">#broadcast 224.0.1.1 autokey            # multicast server</span><br><span class="line">#multicastclient 224.0.1.1              # multicast client</span><br><span class="line">#manycastserver 239.255.254.254         # manycast server</span><br><span class="line">#manycastclient 239.255.254.254 autokey # manycast client</span><br><span class="line"></span><br><span class="line"># Enable public key cryptography.</span><br><span class="line">#crypto</span><br><span class="line"></span><br><span class="line">includefile &#x2F;etc&#x2F;ntp&#x2F;crypto&#x2F;pw</span><br><span class="line"></span><br><span class="line"># Key file containing the keys and key identifiers used when operating</span><br><span class="line"># with symmetric key cryptography.</span><br><span class="line">keys &#x2F;etc&#x2F;ntp&#x2F;keys</span><br><span class="line"></span><br><span class="line"># Specify the key identifiers which are trusted.</span><br><span class="line">#trustedkey 4 8 42</span><br><span class="line"># Specify the key identifier to use with the ntpdc utility.</span><br><span class="line">#requestkey 8</span><br><span class="line"></span><br><span class="line"># Specify the key identifier to use with the ntpq utility.</span><br><span class="line">#controlkey 8</span><br><span class="line"></span><br><span class="line"># Enable writing of statistics records.</span><br><span class="line">#statistics clockstats cryptostats loopstats peerstats</span><br><span class="line"></span><br><span class="line"># Disable the monitoring facility to prevent amplification attacks using ntpdc</span><br><span class="line"># monlist command when default restrict does not include the noquery flag. See</span><br><span class="line"># CVE-2013-5211 for more details.</span><br><span class="line"># Note: Monitoring will not be disabled with the limited restriction flag.</span><br><span class="line">disable monitor</span><br></pre></td></tr></table></figure><p>咱们只需要配置一下授权IP就好。授权IP参数是restrict字段。</p><p>观察这个配置文件，发现里边有许多server。其实NTP服务也是依托与网络NTP服务，只是让服务端获取时间，然后将时间分发给服务器。</p><p><strong>注意：没有绝对准确的时钟，目前相对准确的时钟是美国NIST锶原子时钟，咱们可以把上边的server换成这个授时源。</strong></p><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start ntpd</span><br></pre></td></tr></table></figure><p>服务端设置完成。</p><h1 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h1><p>在客户端使用ntpdate就可以访问到ntp授时。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># ntpdate 192.168.139.152</span></span><br><span class="line"> 1 Dec 22:35:56 ntpdate[1511]: the NTP socket is <span class="keyword">in</span> use, exiting</span><br></pre></td></tr></table></figure><p>我是在服务端运行的，所以没有进行时间调整。在其他服务器上运行这个命令时，会返回服务器调整的时间。</p><p><strong>补充知识：服务器和PC机一样，平时都是使用BIOS上的时间，偶尔向NTP服务器获取准确时间以校正本地时间，所以我们获得授时之后最好将时间写入BIOS。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;通常情况下，服务器的授时服务都是连接至网络上的授时服务器的。但是有的时候，服务器进行异地容灾，特别在国外的时候，需要生成日志，日志时间要求是主服务的时间基准，那么就需要架设NTP服务进行授时了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/nfs</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/nfs/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/nfs/</id>
    <published>2020-03-08T11:54:55.642Z</published>
    <updated>2019-12-15T08:17:07.454Z</updated>
    
    <content type="html"><![CDATA[<p>服务器列表</p><table><thead><tr><th>服务器</th><th>IP</th></tr></thead><tbody><tr><td>master</td><td>192.168.139.146</td></tr><tr><td>slave</td><td>192.168.139.131</td></tr></tbody></table><p>首先，记得防火墙放行111端口。我这里直接关闭了防火墙，所以就不多赘述。</p><p>安装NFS服务的几个必要软件：rpmbind和nfs-utils</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install rpcbind nfs-utils</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs</span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs</span><br></pre></td></tr></table></figure><p>咱们可以查看一下服务端口，看看服务是不是已经在运行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># rpcinfo -p localhost</span></span><br><span class="line"></span><br><span class="line">   program vers proto   port  service</span><br><span class="line">    100000    4   tcp    111  portmapper</span><br><span class="line">    100000    3   tcp    111  portmapper</span><br><span class="line">    100000    2   tcp    111  portmapper</span><br><span class="line">    100000    4   udp    111  portmapper</span><br><span class="line">    100000    3   udp    111  portmapper</span><br><span class="line">    100000    2   udp    111  portmapper</span><br></pre></td></tr></table></figure><p>111端口正常监听，说明服务已经在运行了。</p><p>定义一下服务共享的目录，在/etc/exports中设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># vi /etc/exports</span></span><br><span class="line"></span><br><span class="line">/data 192.168.139.0/24(rw)</span><br></pre></td></tr></table></figure><p>第一个参数是共享的目录，第二个是允许访问的网段，用IP/mask的格式定义。括号里写权限。</p><p>这里记得，nfs服务在安装时会创建一个nfsnobody的用户和用户组，共享的目录的所有者和所有组定义为nfsnobody。然后重新启动服务。</p><p>OK，咱们在服务端的配置已经完成了，下来配置客户端。</p><p>首先在客户机上扫描服务端的共享状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># owmount -e 192.168.139.146</span></span><br><span class="line"></span><br><span class="line">Export list <span class="keyword">for</span> 192.168.139.146:</span><br><span class="line">/data 192.168.139.0/24</span><br></pre></td></tr></table></figure><p>共享状态正常，下来将nfs挂载到客户机：</p><p>在客户机上创建一下挂载点，然后将nfs挂载上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># mount -t  nfs 172.16.1.31:/data/ /mnt</span></span><br></pre></td></tr></table></figure><p>nfs的基本功能已经可以实现了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务器列表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务器&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;master&lt;/td&gt;
&lt;td&gt;192.168.139.146&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/lvs原理</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/lvs%E5%8E%9F%E7%90%86/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/lvs%E5%8E%9F%E7%90%86/</id>
    <published>2020-03-08T11:54:55.635Z</published>
    <updated>2020-02-21T06:03:31.715Z</updated>
    
    <content type="html"><![CDATA[<p>LVS全称是Linux Virtual Server，即Linux虚拟服务器。这是一个具有三种工作模式，十种调度算法的代理服务器软件。</p><p>这是一种常见的反向代理案例</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/07/070617_0124_1.png" alt=""></p><p>这是LVS组成了一个负载均衡集群，LVS服务器将接收到的请求转发给了群内主机上。因为LVS在这里进行了数据的分发，像一个中转，所以我们叫做“调度器”。</p><p>在生产环境中，服务器一般都是要发布在公网的。因为backend的特殊性不便于直接暴露在公网上，那么LVS服务器就起了很大的作用。</p><p>LVS被配置了一个公网IP，这个IP将被客户进行访问，这个IP通常称为VIP。LVS服务器一般都是使用了双网卡，另一张网卡要连接到内网，那么这张内网网卡的IP就叫做DIP，群内主机的内网IP就叫做RIP。</p><h1 id="NAT定义"><a href="#NAT定义" class="headerlink" title="NAT定义"></a>NAT定义</h1><p>NAT的意思就行网络地址转换。了解虚拟化的话就会知道，VMware虚拟机默认运行在NAT的网络模式下，这个网络模式下，群内主机使用一个特殊的IP，与NAT服务器的与外网连接的IP不同。外部访问VIP的时候，请求的VIP会被LVS服务器转换成RIP，再由DIP进行转发，发送到RIP上。返回报文的原理也一样。</p><p>定义方式：</p><p>创建NAT映射：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -A -t VIP:port -s rr</span><br><span class="line">ipvsadm -a -t VIP:PORT -r RIP:port -m</span><br></pre></td></tr></table></figure><p>这样创建出来的NAT不能被localhost访问，原因如下：</p><p>NAT被直接绑定到了VIP，并没有绑定到主机本身，那么主机的localhost环路是无法访问到环路外的内容的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LVS全称是Linux Virtual Server，即Linux虚拟服务器。这是一个具有三种工作模式，十种调度算法的代理服务器软件。&lt;/p&gt;
&lt;p&gt;这是一种常见的反向代理案例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.zsythink.net/wp-cont
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/haproxy</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/haproxy/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/haproxy/</id>
    <published>2020-03-08T11:54:55.623Z</published>
    <updated>2020-03-07T12:08:05.382Z</updated>
    
    <content type="html"><![CDATA[<p>haproxy是进行四层转发（http转发）和七层转发（TCP转发）的常用工具，常用于负载均衡。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install haproxy</span><br></pre></td></tr></table></figure><p>配置文件：</p><p>配置文件在/etc/haproxy/haproxy.cnf</p><p>参数功能表</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>log</td><td>全局日志</td></tr><tr><td>chroot</td><td>工作目录</td></tr><tr><td>pidfile</td><td>pid的储存位置</td></tr><tr><td>maxconn</td><td>最大并发数</td></tr><tr><td>user</td><td>软件用户</td></tr><tr><td>group</td><td>软件用户组</td></tr></tbody></table><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>负载均衡的原理就是使用反向代理，利用轮询等算法进行服务器访问。</p><p>在配置文件创建listen模块。语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listen SL_name *:port</span><br><span class="line">    balance roundrobin #均衡模块</span><br><span class="line">    server server_name serverhost check</span><br><span class="line">    server server_name serverhost check</span><br></pre></td></tr></table></figure><h1 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h1><p>动静分离类似于nginx的动静分离，具体配置如下：</p><p>在配置文件创建模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frontend  main *:80</span><br><span class="line">    acl url_static      path_beg      -i &#x2F;static &#x2F;images</span><br><span class="line">    acl url_static      path_end      -i .jpg .gif .png .css .js </span><br><span class="line">    use_backend static          if url_static </span><br><span class="line">    default_backend            app</span><br></pre></td></tr></table></figure><ul><li><p>acl表示负载策略，后边以url的参数是acl策略的名。</p></li><li><p>第三个参数是url的解析策略。path_beg是url开头包含，path_end是url结尾包含。</p></li><li><p>-i参数后边跟的是解析策略。</p></li></ul><p>后边的逻辑分析如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use_backend static          if url_static  #后边if的意思是探测是否触发了静态的acl</span><br><span class="line">default_backend            app  #默认的模块</span><br></pre></td></tr></table></figure><ul><li><p>第一个参数表示模块设定</p></li><li><p>第二个参数表示backend名</p></li><li><p>第三个参数表示backend模块</p></li></ul><p>在这个模块之后定义一下backend。backend定义格式和前边负载均衡定义listen的语法相同。</p><h1 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h1><h2 id="roundrobin"><a href="#roundrobin" class="headerlink" title="roundrobin"></a>roundrobin</h2><p>轮询算法，也可以配合使用weight记性权重轮询，但是更推荐使用下边的方法进行权重轮询。</p><h2 id="static-rr"><a href="#static-rr" class="headerlink" title="static-rr"></a>static-rr</h2><p>权重轮询，按照配置的权重进行轮询均衡。</p><h2 id="leastconn"><a href="#leastconn" class="headerlink" title="leastconn"></a>leastconn</h2><p>查最少连接的主机，转发到最少连接的主机。</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>根据源IP进行转发。</p><h2 id="uri"><a href="#uri" class="headerlink" title="uri"></a>uri</h2><p>根据uri进行请求转发。</p><h2 id="url-param"><a href="#url-param" class="headerlink" title="url_param"></a>url_param</h2><p>根据url的请求进行转发。</p><p>在设置这个参数的时候，这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">balance url_param test</span><br></pre></td></tr></table></figure><p>这样的话，需要请求到哪个主机，直接使用get请求，发送到haproxy服务器。</p><h2 id="hdr"><a href="#hdr" class="headerlink" title="hdr"></a>hdr</h2><p>根据http请求头锁定一个请求。</p><h1 id="session共享及一致性问题"><a href="#session共享及一致性问题" class="headerlink" title="session共享及一致性问题"></a>session共享及一致性问题</h1><p>如果session一致就会出现刷新页面后，页面的信息发生变化，所以我们就要做session共享。</p><ul><li>方法一： 使用source，获取用户IP hash。</li><li>方法二： 使用cookie进行session识别。</li><li>方法三： 后端服务器产生的session和后端服务器标识存在haproxy中的一张表里</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;haproxy是进行四层转发（http转发）和七层转发（TCP转发）的常用工具，常用于负载均衡。&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/FTP服务</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/FTP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/FTP%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-03-08T11:54:55.614Z</published>
    <updated>2019-12-15T08:17:07.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FTP介绍"><a href="#FTP介绍" class="headerlink" title="FTP介绍"></a>FTP介绍</h1><p>在生产环境的架设中，常常会有开发部门上传一些页面文件到服务器。有些开发的程序员可能Linux基础不是特别好，所以咱们就需要给他们留一个传输文件的接口。通常使用sftp和ftp协议。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>需要的软件：vsftpd</p><p>安装方法：sudo apt install vsftpd</p><p>启动方法：systemctl start vsftpd</p><h1 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h1><p>乌班图下，配置文件在/etc/vsftpd.conf</p><p>配置功能表：</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>listen</td><td>监听</td></tr><tr><td>anonymous_enable</td><td>匿名登录</td></tr><tr><td>anon_root</td><td>匿名登陆目录</td></tr><tr><td>local_enable</td><td>允许本地用户登录</td></tr></tbody></table><h1 id="添加用户和用户目录"><a href="#添加用户和用户目录" class="headerlink" title="添加用户和用户目录"></a>添加用户和用户目录</h1><p>可以用userlist和本地账户的方法进行配置。这里说本地账户的方法。</p><p>在本地创建一下账户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd username -s user_dir</span><br></pre></td></tr></table></figure><p>这里的-s参数是指定用户目录。如果要给用户添加指定目录，则加参数-d。</p><p>创建完用户后，设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd user</span><br></pre></td></tr></table></figure><p>连续输入两次密码以后则创建成功，可以用ftp工具使用FTP服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;FTP介绍&quot;&gt;&lt;a href=&quot;#FTP介绍&quot; class=&quot;headerlink&quot; title=&quot;FTP介绍&quot;&gt;&lt;/a&gt;FTP介绍&lt;/h1&gt;&lt;p&gt;在生产环境的架设中，常常会有开发部门上传一些页面文件到服务器。有些开发的程序员可能Linux基础不是特别好，所以咱们
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/DNS服务</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/DNS%E6%9C%8D%E5%8A%A1/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/DNS%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-03-08T11:54:55.606Z</published>
    <updated>2020-03-07T08:25:13.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DNS服务器原理"><a href="#DNS服务器原理" class="headerlink" title="DNS服务器原理"></a>DNS服务器原理</h1><p>DNS服务器是对域名进行解析的服务器。当浏览器访问网页时，首先会给DNS服务器发送一个请求，解析到域名对应的IP上，然后浏览器对IP进行访问。</p><p>DNS服务器保存了解析的域名和IP，通常来说，这个解析是一一对应的。</p><p>客户端发起请求，首先会在客户端的hosts文件中查询是否有相关的解析，如果没有，将包含有域名的请求头转发给DNS服务器上。当DNS服务器上也查不到相关的解析时，就会将数据转发给根服务器进行数据解析，也可以将数据转发给forward进行解析。</p><h1 id="权威DNS和非权威DNS"><a href="#权威DNS和非权威DNS" class="headerlink" title="权威DNS和非权威DNS"></a>权威DNS和非权威DNS</h1><p>权威DNS是指官方的DNS服务器，这种服务器的解析数量大，且更为稳定。非权威DNS是指自己搭建的DNS服务器，一般是自己或公司使用，使用范围小，可承载的并发量不大的情况。</p><h1 id="根服务器"><a href="#根服务器" class="headerlink" title="根服务器"></a>根服务器</h1><p>目前全球有13个根DNS服务器。九台在美国，还有三台分别在英国，瑞士和日本。还有一台是主跟服务器（相当于根服务器的解析入口，从这被一层一层解析）。</p><h1 id="安装named服务"><a href="#安装named服务" class="headerlink" title="安装named服务"></a>安装named服务</h1><p>可以直接使用yum安装方式安装named</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="built_in">bind</span></span><br></pre></td></tr></table></figure><p>在默认情况下，named的配置文件会被分布到两个位置，一个是/etc下，一个是/var/named下。</p><p>对named进行基础参数配置。</p><p>编辑named.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># vim /etc/named.conf</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">listen-on port 53 &#123; any; &#125;;</span><br><span class="line">...</span><br><span class="line">allow-query     &#123; any; &#125;;</span><br><span class="line">...</span><br><span class="line">recursion yes;</span><br><span class="line">forward first;</span><br><span class="line">forwarders &#123;</span><br><span class="line">223.5.5.5;</span><br><span class="line">223.6.6.6;</span><br><span class="line">8.8.8.8;</span><br><span class="line">8.8.4.4;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分析一下上边的字段：</p><p>listen-on：监听，配置了监听端口和监听IP，通常使用any（所有网卡都进行监听），如果需要绑定到特定的ip，就直接在这里写。</p><p>allow-query：允许访问。一般默认情况这里只会允许localhost进行访问。可以改成any，亦可以写成ip的形式。</p><h1 id="创建正向解析"><a href="#创建正向解析" class="headerlink" title="创建正向解析"></a>创建正向解析</h1><p>观察named.conf文件，会发现有以下一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &quot;&#x2F;etc&#x2F;named.rfc1912.zones&quot;;</span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.root.key&quot;;</span><br></pre></td></tr></table></figure><p>不难看出，这里引入了两个文件。通常，第一个文件是zone的文件，第二个是用户密钥文件。查看zone文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># cat /etc/named.rfc1912.zones</span></span><br><span class="line"></span><br><span class="line">zone <span class="string">"localhost.localdomain"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"named.localhost"</span>;</span><br><span class="line">allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">"localhost"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"named.localhost"</span>;</span><br><span class="line">allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"named.loopback"</span>;</span><br><span class="line">allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">"1.0.0.127.in-addr.arpa"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"named.loopback"</span>;</span><br><span class="line">allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">"0.in-addr.arpa"</span> IN &#123;</span><br><span class="line"><span class="built_in">type</span> master;</span><br><span class="line">file <span class="string">"named.empty"</span>;</span><br><span class="line">allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以见得，上述的写法是相同的。都是创建一个zone块，然后对zone块进行参数配置。</p><p>type参数：字面意思，就是类型。通常设置master，作为主机。DNS的主从原理后边再说。</p><p>file参数：解析的文件，下边再说这个文件的写法和原理。</p><p>allow-update参数：这也是权限配置。</p><h1 id="解析类型及解析文件"><a href="#解析类型及解析文件" class="headerlink" title="解析类型及解析文件"></a>解析类型及解析文件</h1><p>查看一下前边的file，看看结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$TTL 3H</span><br><span class="line">@IN SOA@ rname.invalid. (</span><br><span class="line">0; serial</span><br><span class="line">1D; refresh</span><br><span class="line">1H; retry</span><br><span class="line">1W; expire</span><br><span class="line">3H ); minimum</span><br><span class="line">NS@</span><br><span class="line">A127.0.0.1</span><br><span class="line">AAAA::1</span><br></pre></td></tr></table></figure><p>这里插入一段前置知识：</p><table><thead><tr><th>解析类型</th><th>意义</th></tr></thead><tbody><tr><td>A</td><td>典型的IPV4解析，将域名指向这个IP</td></tr><tr><td>CNAME</td><td>解析到别名，和rewrite有点像</td></tr><tr><td>MX</td><td>邮箱解析，比如@qq.com这样的</td></tr><tr><td>TXT</td><td>为域名设置说明</td></tr><tr><td>NS</td><td>name server</td></tr></tbody></table><p><strong>需要注意：</strong>A解析和AAAA解析的区别：A解析和AAAA解析的作用是相同的，但是一个工作在IPV4网络下，一个工作在IPV6网络下。</p><p>按照上边的文件创建一个自己的解析文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$TTL 3H</span><br><span class="line">@IN SOA@ hzlslm.org.cn. (</span><br><span class="line">0; serial</span><br><span class="line">1D; refresh</span><br><span class="line">1H; retry</span><br><span class="line">1W; expire</span><br><span class="line">3H ); minimum</span><br><span class="line">IN NS     dns.test.com.</span><br><span class="line">IN MX  5  mail</span><br><span class="line">wwwINA47.112.118.26</span><br></pre></td></tr></table></figure><p>设置的生存时间是三小时，即三小时后会刷新DNS。</p><p>第一行的那一块是创建了这个域名的解析块，按这样写就好了。</p><p>最后一行，我创建了一个www的解析，这个解析格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记录名IN解析方式解析值</span><br></pre></td></tr></table></figure><p>创建完毕后，可以使用named-checkconf进行配置校验。如果没问题的话就可以启动服务了。</p><h1 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h1><p>客户端一般是windows或者linux用户机。</p><p>windows：在网络和共享中心中直接修改DNS。</p><p>linux：修改resolve.conf文件。</p><p><strong>注意一点，如果要做外网的DNS非权威服务器，最好使用经典网络服务器，直接将IP分配给服务器，尽量不要使用DMZ的方式做内网映射。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DNS服务器原理&quot;&gt;&lt;a href=&quot;#DNS服务器原理&quot; class=&quot;headerlink&quot; title=&quot;DNS服务器原理&quot;&gt;&lt;/a&gt;DNS服务器原理&lt;/h1&gt;&lt;p&gt;DNS服务器是对域名进行解析的服务器。当浏览器访问网页时，首先会给DNS服务器发送一个请求，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/DHCP服务</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/DHCP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/DHCP%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-03-08T11:54:55.595Z</published>
    <updated>2020-03-07T10:20:35.248Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在家用的路由器上，一般都会集成DHCP这个功能。DHCP服务，负责给网络内的主机分配IP和netmask，更便于主机的联网操作。</p></blockquote><p>既然咱们要搭建DHCP服务，那么，咱们就不能让网络内有相关的服务存在，原因如下：</p><ol><li><p>主机不知道该向谁获取IP地址</p></li><li><p>DHCP服务器会发生冲突</p></li></ol><p>DHCP服务，常用在大型网络环境下（如果三四台主机，那就没必要了，手动一下就行了）。但是切记，<strong>在服务器网络不要用DHCP服务，因为DHCP是由租约期的，租约期到会重新分配IP，有可能发生IP改变。服务器需要稳定的IP支持，才能保证用户的正常访问，所以为了避免服务突然没法访问。DHCP一般不会用到这里。</strong></p><h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><p>配置DHCP的前提就是网络环境内没有这个配置，所以服务端就没有分配IP，就不会有网，所以咱们先设置一下静态IP。</p><p>一般情况下，网卡配置文件在<code>/etc/sysconfig/network-scripts</code>,咱们编辑一下这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE&#x3D;&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD&#x3D;&quot;none&quot;</span><br><span class="line">BROWSER_ONLY&#x3D;&quot;no&quot;</span><br><span class="line">BOOTPROTO&#x3D;&quot;static&quot; #IP获取方式</span><br><span class="line">DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6INIT&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;&quot;stable-privacy&quot;</span><br><span class="line">NAME&#x3D;&quot;ens33&quot;</span><br><span class="line">UUID&#x3D;&quot;46a79d3e-fc47-4372-a2d5-359d2e0545dd&quot;</span><br><span class="line">DEVICE&#x3D;&quot;ens33&quot;</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line">IPADDR&#x3D;192.168.139.152 #本机IP</span><br><span class="line">GATEWAY&#x3D;192.168.139.2 #网关</span><br><span class="line">NETMASK&#x3D;255.255.255.0 #子网掩码</span><br><span class="line">DNS1&#x3D;114.114.114.114 #DNS服务器，记得一定要添加</span><br></pre></td></tr></table></figure><p>设置好侯，我们重新启动一下网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>咱们再查看一下IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bash<span class="comment"># ip add</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:7d:97:dc brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.139.152/24 brd 192.168.139.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::1811:571e:bbd8:4a30/64 scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>IP被绑定了，也可能没网，所以咱们ping一下外网网站。</p><p>网络一切准备就绪，开始安装服务。</p><p>在服务端，直接进行yum安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install dhcp</span><br></pre></td></tr></table></figure><p>dhcpd软件的配置文件在/etc/dhcp/dhcpd.conf，且默认是没有任何参数的。dhcpd在安装时为用户生成了配置的模板文件，咱们拷贝过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/doc/dhcp*/dhcpd.conf.example /etc/dhcp/dhcpd.conf</span><br></pre></td></tr></table></figure><p>开始编辑必要参数。参数的功能表如下：</p><table><thead><tr><th>字段</th><th>功能</th></tr></thead><tbody><tr><td>default-lease-time</td><td>默认租约时间</td></tr><tr><td>max-lease-time</td><td>最大租约时间</td></tr><tr><td>log-facility</td><td>日志</td></tr></tbody></table><p>以上是这个软件的最简配置参数，下来看一下我的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">default-lease-time 600;</span><br><span class="line">max-lease-time 7200;</span><br><span class="line">log-facility local7;</span><br><span class="line"></span><br><span class="line">subnet 192.168.139.0 netmask 255.255.255.0 &#123;</span><br><span class="line">        range  192.168.139.100  192.168.139.200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里解释一下：</p><p>subnet是网段，就是根据netmask解析的网络IP号</p><p>netmask是子网掩码</p><p>range是IP分配的取值域</p><p>OK，可以运行服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start dhcpd</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>一般情况下只需要将获取IP方式改成DHCP就好了。</p><h1 id="查看租约"><a href="#查看租约" class="headerlink" title="查看租约"></a>查看租约</h1><p>DHCP的租约时间被保存在<code>/var/lib/dhcpd/dhcpd.leases</code>，查看文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"># The format of this file is documented in the dhcpd.leases(5) manual page.</span><br><span class="line"># This lease file was written by isc-dhcp-4.2.5</span><br><span class="line"></span><br><span class="line">server-duid &quot;\000\001\000\001%vq\346\000\014)&#125;\227\334&quot;;</span><br><span class="line"></span><br><span class="line">lease 192.168.139.131 &#123;</span><br><span class="line">  starts 0 2019&#x2F;12&#x2F;01 12:46:21;</span><br><span class="line">  ends 0 2019&#x2F;12&#x2F;01 12:56:21;</span><br><span class="line">  cltt 0 2019&#x2F;12&#x2F;01 12:46:21;</span><br><span class="line">  binding state active;</span><br><span class="line">  next binding state free;</span><br><span class="line">  rewind binding state free;</span><br><span class="line">  hardware ethernet 00:0c:29:46:2c:87;</span><br><span class="line">  uid &quot;\001\000\014)F,\207&quot;;</span><br><span class="line">&#125;</span><br><span class="line">lease 192.168.139.131 &#123;</span><br><span class="line">  starts 0 2019&#x2F;12&#x2F;01 12:51:20;</span><br><span class="line">  ends 0 2019&#x2F;12&#x2F;01 13:01:20;</span><br><span class="line">  cltt 0 2019&#x2F;12&#x2F;01 12:51:20;</span><br><span class="line">  binding state active;</span><br><span class="line">  next binding state free;</span><br><span class="line">  rewind binding state free;</span><br><span class="line">  hardware ethernet 00:0c:29:46:2c:87;</span><br><span class="line">  uid &quot;\001\000\014)F,\207&quot;;</span><br><span class="line">&#125;</span><br><span class="line">lease 192.168.139.131 &#123;</span><br><span class="line">  starts 0 2019&#x2F;12&#x2F;01 12:56:19;</span><br><span class="line">  ends 0 2019&#x2F;12&#x2F;01 13:06:19;</span><br><span class="line">  cltt 0 2019&#x2F;12&#x2F;01 12:56:19;</span><br><span class="line">  binding state active;</span><br><span class="line">  next binding state free;</span><br><span class="line">  rewind binding state free;</span><br><span class="line">  hardware ethernet 00:0c:29:46:2c:87;</span><br><span class="line">  uid &quot;\001\000\014)F,\207&quot;;</span><br><span class="line">&#125;</span><br><span class="line">lease 192.168.139.131 &#123;</span><br><span class="line">  starts 0 2019&#x2F;12&#x2F;01 13:01:18;</span><br><span class="line">  ends 0 2019&#x2F;12&#x2F;01 13:11:18;</span><br><span class="line">  cltt 0 2019&#x2F;12&#x2F;01 13:01:18;</span><br><span class="line">  binding state active;</span><br><span class="line">  next binding state free;</span><br><span class="line">  rewind binding state free;</span><br><span class="line">  hardware ethernet 00:0c:29:46:2c:87;</span><br><span class="line">  uid &quot;\001\000\014)F,\207&quot;;</span><br><span class="line">&#125;</span><br><span class="line">lease 192.168.139.131 &#123;</span><br><span class="line">  starts 0 2019&#x2F;12&#x2F;01 13:06:18;</span><br><span class="line">  ends 0 2019&#x2F;12&#x2F;01 13:16:18;</span><br><span class="line">  cltt 0 2019&#x2F;12&#x2F;01 13:06:18;</span><br><span class="line">  binding state active;</span><br><span class="line">  next binding state free;</span><br><span class="line">  rewind binding state free;</span><br><span class="line">  hardware ethernet 00:0c:29:46:2c:87;</span><br><span class="line">  uid &quot;\001\000\014)F,\207&quot;;</span><br><span class="line">&#125;</span><br><span class="line">lease 192.168.139.131 &#123;</span><br><span class="line">  starts 0 2019&#x2F;12&#x2F;01 13:11:18;</span><br><span class="line">  ends 0 2019&#x2F;12&#x2F;01 13:21:18;</span><br><span class="line">  cltt 0 2019&#x2F;12&#x2F;01 13:11:18;</span><br><span class="line">  binding state active;</span><br><span class="line">  next binding state free;</span><br><span class="line">  rewind binding state free;</span><br><span class="line">  hardware ethernet 00:0c:29:46:2c:87;</span><br><span class="line">  uid &quot;\001\000\014)F,\207&quot;;</span><br><span class="line">&#125;</span><br><span class="line">lease 192.168.139.131 &#123;</span><br><span class="line">  starts 0 2019&#x2F;12&#x2F;01 13:16:18;</span><br><span class="line">  ends 0 2019&#x2F;12&#x2F;01 13:26:18;</span><br><span class="line">  cltt 0 2019&#x2F;12&#x2F;01 13:16:18;</span><br><span class="line">  binding state active;</span><br><span class="line">  next binding state free;</span><br><span class="line">  rewind binding state free;</span><br><span class="line">  hardware ethernet 00:0c:29:46:2c:87;</span><br><span class="line">  uid &quot;\001\000\014)F,\207&quot;;</span><br><span class="line">&#125;</span><br><span class="line">lease 192.168.139.131 &#123;</span><br><span class="line">  starts 0 2019&#x2F;12&#x2F;01 13:21:17;</span><br><span class="line">  ends 0 2019&#x2F;12&#x2F;01 13:31:17;</span><br><span class="line">  cltt 0 2019&#x2F;12&#x2F;01 13:21:17;</span><br><span class="line">  binding state active;</span><br><span class="line">  next binding state free;</span><br><span class="line">  rewind binding state free;</span><br><span class="line">  hardware ethernet 00:0c:29:46:2c:87;</span><br><span class="line">  uid &quot;\001\000\014)F,\207&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出客户端多次向服务端进行注册，且能看出租约的时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在家用的路由器上，一般都会集成DHCP这个功能。DHCP服务，负责给网络内的主机分配IP和netmask，更便于主机的联网操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然咱们要搭建DHCP服务，那么，咱们就不能让网络内有相关的服务存在，原因如
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础服务/Apache</title>
    <link href="http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/Apache/"/>
    <id>http://39.97.232.17/2020/03/08/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/Apache/</id>
    <published>2020-03-08T11:54:55.572Z</published>
    <updated>2020-02-19T05:51:18.498Z</updated>
    
    <content type="html"><![CDATA[<p>Apache是一种很常见的静态web服务器，常常被用作静态页面服务器。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>一般生产环境中都使用编译安装或者二进制安装，这里使用编译安装。</p><p>首先安装一下依赖环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y <span class="string">"Development Tools"</span> <span class="string">"Development Libraries"</span></span><br></pre></td></tr></table></figure><p>下载需要编译安装的依赖（在官网上都有，下载安装即可）</p><p>下载httpd安装包，进行解压安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache//httpd/httpd-2.4.41.tar.gz</span><br><span class="line">tar -zxvf httpd-2.4.41.tar.gz</span><br><span class="line"><span class="built_in">cd</span> httpd-2.4.41</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>这样就安装完成了。</p><h1 id="第一次启动"><a href="#第一次启动" class="headerlink" title="第一次启动"></a>第一次启动</h1><p>Apache第一次启动需要设置一些参数，否则会报错。</p><p>在httpd.conf中设置ServerName，这是设置域名解析的字段。</p><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/apache2/bin/httpd</span><br></pre></td></tr></table></figure><h1 id="发布静态页面"><a href="#发布静态页面" class="headerlink" title="发布静态页面"></a>发布静态页面</h1><p>从配置文件可以看出静态文件的地址是/usr/local/apache2/htdocs，那么我们可以进这个目录去上传html静态页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apache是一种很常见的静态web服务器，常常被用作静态页面服务器。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;一般生产环境中都使用编译安装或者二进制安装，这里使用编
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
